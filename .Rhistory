source("cachematrix.R")
matrix
matrix(1:3,2:5:6:9)
data <- (c(1:3),c(2:5),c(6:9))
data <- c(1:3, 2:5, 6:9)
data
data <- matrix(1:9, nrow = 3, ncol = 3)
data
fix(data)
data
fix(data)
solve(data)
data
solve(data)
m=rbind(c(1, -1/4), c(-1/4, 1))  
m
solve(m)
source("cachematrix.R")
makeCacheMatrix()
source("cachematrix.R")
makeCacheMatrix()
source("cachematrix.R")
makeCacheMatrix()
data
m
makeCacheMatrix(set(m))
makeCacheMatrix$set(m)
makeCacheMatrix
makeCacheMatrix()
makeCacheMatrix$set(m)
makeVector <- function(x = numeric()) {
        m <- NULL
        set <- function(y) {
                x <<- y
                m <<- NULL
        }
        get <- function() x
        setmean <- function(mean) m <<- mean
        getmean <- function() m
        list(set = set, get = get,
             setmean = setmean,
             getmean = getmean)
}
cachemean <- function(x, ...) {
        m <- x$getmean()
        if(!is.null(m)) {
                message("getting cached data")
                return(m)
        }
        data <- x$get()
        m <- mean(data, ...)
        x$setmean(m)
        m
}
v <- (1,2)
v <- c(1,2)
makeVector$set(v)
makeVector(v)
makeVector(set$v)
makeVector()
makeVector(get)
makeVector.get()
makeVector()
makeVector$get()
makeVector()
makeCacheMatrix(m)
m
data <- makeCacheMatrix(m)
data
data$get()
data
data <- makeCacheMatrix(m)
data$get()
data$getinverse()
cacheSolve(data)
cacheSolve(data)
cacheSolve(data)
cacheSolve(data)
cacheSolve(data)
m
solve(m)
quit
quit()
